{
  "name": "V0.4",
  "nodes": [
    {
      "parameters": {},
      "id": "f26f8e3e-156a-4506-923e-2ce440fe0f22",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        260,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "17fbdf76-4ab6-48a0-946f-5d226b3587ee",
              "name": "=table",
              "type": "string",
              "value": "={{ $('Edit Fields6').item.json.table_name }}"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "2fe797b6-3017-454b-a0cf-9aad053bac36",
      "name": "Edit Fields4",
      "type": "n8n-nodes-base.set",
      "position": [
        1140,
        280
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {
          "fileName": "model_mysql.json"
        }
      },
      "id": "3f3d7c16-68c1-4cd5-8e8d-d9873358dfc1",
      "name": "Convert to File1",
      "type": "n8n-nodes-base.convertToFile",
      "position": [
        1580,
        280
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "./model_mysql.json",
        "options": {
          "append": false
        }
      },
      "id": "10bedc29-e05b-4ec9-a3c5-abef67a1e2e6",
      "name": "Read/Write Files from Disk4",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        1800,
        280
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "const result = {};\nconst properties_model = $('Edit Fields4').all();\n\nfor(const property of properties_model){\n  const table = property.json.table;\n\n  if (!result[table]) {\n    result[table] = [];\n  }\n\n  result[table].push({\n    field: property.json.Field,\n    type: property.json.Type,\n    nullable: property.json.Null,\n    key: property.json.Key,\n    default: property.json.Default,\n    extra: property.json.Extra\n  });\n};\n\nreturn result;"
      },
      "id": "a1afcf55-c75a-4417-aeb6-c2fd6093d2ed",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "position": [
        1360,
        280
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7a6c1a5f-c34c-4d90-b86b-0ae77eab1eaa",
              "name": "table_name",
              "type": "string",
              "value": "={{ $json.Tables_in_olympus_barberia }}"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "selected",
        "includeFields": "={{ $json.Tables_in_olympus_barberia }}",
        "options": {}
      },
      "id": "c0eba596-8ae3-4e3a-bd9c-f324212454ba",
      "name": "Edit Fields6",
      "type": "n8n-nodes-base.set",
      "position": [
        700,
        280
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SHOW TABLES",
        "options": {}
      },
      "id": "56c400cc-93c3-435c-95df-ac298344841b",
      "name": "Show Tables",
      "type": "n8n-nodes-base.mySql",
      "position": [
        480,
        280
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DESCRIBE {{ $json.table_name }}",
        "options": {}
      },
      "id": "07340cf3-9636-4411-bdff-b20bc56751c0",
      "name": "Describe Tables2",
      "type": "n8n-nodes-base.mySql",
      "position": [
        920,
        280
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "content": "# Generate model database file\n## More efficient for workflow, don't necessarily make a query to retrieve the schema\n\n",
        "height": 460,
        "width": 1920,
        "color": 6
      },
      "id": "2ac61dfa-1198-4108-a1d8-f8d29261a976",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        140,
        100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "60cd4390-227f-43d9-b001-e588fe8e1595",
              "name": "schema",
              "type": "string",
              "value": "={{ $json.data }}"
            },
            {
              "id": "62e1b7aa-2637-4693-a6a5-659f08ee8c51",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $('Webhook2').item.json.body.from }}"
            },
            {
              "id": "96f31142-2caf-484c-9a1c-1707ed521350",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $('Merge').item.json.chatInput }}"
            }
          ]
        },
        "options": {}
      },
      "id": "1a979028-5429-4e34-b73b-b28fc3cb2359",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "position": [
        1120,
        1520
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "8ad815ac-9d80-4ec3-9400-df0a70a21960",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        920,
        1520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "fileSelector": "./model_mysql.json",
        "options": {}
      },
      "id": "b3aae63c-a584-44af-a653-c5c57b949e42",
      "name": "Read/Write Files from Disk",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        700,
        1520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "clientes",
          "cachedResultName": "clientes"
        },
        "dataMode": "defineBelow",
        "valuesToSend": {
          "values": [
            {
              "column": "nombre",
              "value": "={{ $fromAI(\"nombre\", \"nombre y apellido\") }}"
            },
            {
              "column": "correo",
              "value": "={{ $fromAI(\"correo\", \"correo del usuario\") }}"
            },
            {
              "column": "telefono",
              "value": "={{ $fromAI(\"telefono\",\"numero de telefono\") }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a2af4548-9def-400d-8f6a-774a408ac45f",
      "name": "Insertar Cliente",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2440,
        1760
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "efac56c4-fe10-4448-862c-396e3145fb10/webhook/whatsapp",
        "options": {}
      },
      "id": "86eedcb2-c86c-4e99-94ee-4eab3f79454f",
      "name": "Webhook2",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -80,
        1520
      ],
      "webhookId": "efac56c4-fe10-4448-862c-396e3145fb10",
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3001/send-message",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=to",
              "value": "={{ $('Webhook2').item.json.body.from }}"
            },
            {
              "name": "message",
              "value": "={{ $json.output }}"
            },
            {
              "name": "=fromMe",
              "value": "={{ $('Webhook2').item.json.body.raw.key.fromMe }}"
            },
            {
              "name": "=remoteJid",
              "value": "={{ $('Webhook2').item.json.body.raw.key.remoteJid }}"
            }
          ]
        },
        "options": {}
      },
      "id": "157860b8-2800-4140-b090-6e5de03f027e",
      "name": "HTTP Request6",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2620,
        1520
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "clientes",
          "cachedResultName": "clientes"
        },
        "where": {
          "values": [
            {
              "column": "telefono",
              "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('values0_Value', `identificador del chat`, 'string') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "18c5380c-ce7f-48c5-a989-427918152242",
      "name": "Seleccionar Cliente",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2260,
        1760
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "barberos",
          "cachedResultName": "barberos"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "id": "8b3416de-1c69-4356-b889-04235b18a3a2",
      "name": "Seleccionar Barbero",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2460,
        1940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI(\"consulta_sql\", \"Consulta sql en base a las necesidades del agente\") }}",
        "options": {}
      },
      "id": "f6645ec1-84bd-45c8-b71a-c55d39398d54",
      "name": "Consultar en Base de Datos",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2080,
        1760
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "servicios",
          "cachedResultName": "servicios"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "id": "cc5d01c2-f59d-4372-aa6b-38031d1adfa7",
      "name": "Buscar Servicios",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2260,
        1940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "citas",
          "cachedResultName": "citas"
        },
        "dataMode": "defineBelow",
        "options": {}
      },
      "id": "9877af90-35c1-4d18-a0e7-6fa3f9eb36d5",
      "name": "Insertar Citas",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2080,
        1940
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "9epx8Hjo2nScFajU",
          "cachedResultName": "My Sub-Workflow 1"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "85f39ec3-a916-4cee-8385-74b320fc8581",
      "name": "Call n8n Workflow Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        3800,
        260
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "9epx8Hjo2nScFajU",
          "cachedResultName": "My Sub-Workflow 1"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "id": "06826cc0-a79f-406e-b899-8d5cb432b964",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        3460,
        260
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "fileSelector": "./model_mysql.json",
        "options": {}
      },
      "id": "62fc93b9-c4c6-4f15-af3d-81a000a21410",
      "name": "Read/Write Files from Disk3",
      "type": "n8n-nodes-base.readWriteFile",
      "position": [
        2780,
        260
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "fromJson",
        "options": {}
      },
      "id": "0b717d3b-8c42-4f6d-bb18-98b38990a9dc",
      "name": "Extract from File2",
      "type": "n8n-nodes-base.extractFromFile",
      "position": [
        3000,
        260
      ],
      "typeVersion": 1,
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "60cd4390-227f-43d9-b001-e588fe8e1595",
              "name": "schema",
              "type": "string",
              "value": "={{ $json.data }}"
            },
            {
              "id": "c43be3c8-2314-4ea0-9467-96a48e81a90a",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $('Webhook').item.json.body.raw.message.extendedTextMessage.text }}"
            },
            {
              "id": "62e1b7aa-2637-4693-a6a5-659f08ee8c51",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $('Webhook').item.json.body.from }}"
            },
            {
              "id": "f132adc0-5023-40d3-986b-58a2f52247d5",
              "name": "userPushName",
              "type": "string",
              "value": "={{ $('Webhook').item.json.body.raw.pushName }}"
            }
          ]
        },
        "options": {}
      },
      "id": "917b9d72-0ad8-4bab-98eb-dc0225b74261",
      "name": "Edit Fields3",
      "type": "n8n-nodes-base.set",
      "position": [
        3220,
        260
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "9cdd8594-0530-4a8e-a3dd-eb54dd00b87a",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.output.intencion }}",
                    "rightValue": "Conversación general"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Conversación general"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "fc79b629-36c8-40b3-bb85-dd612f7dc423",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.output.intencion }}",
                    "rightValue": "Informacion cliente"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Informacion cliente"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "edd75394-f102-4faa-be97-95c92c4d5cf9",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.output.intencion }}",
                    "rightValue": "Registro Cliente"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Registro Cliente"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "68e9c14e-0202-43fe-99bb-b8c62dabc874",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.output.intencion }}",
                    "rightValue": "=Agendar cita"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "Agendar cita"
            }
          ]
        },
        "options": {}
      },
      "id": "99d5f00c-2d86-460d-906a-e66d6982d9c0",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        1600,
        2300
      ],
      "typeVersion": 3.2,
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=mensaje del usuario: \"{{ $json.chatInput }}\"\nsessionId: \"{{ $json.sessionId }}\"",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=Eres un asistente experto en clasificar mensajes de usuarios recibidos a través de WhatsApp para un agente de ventas automatizado. Tu tarea es analizar el mensaje del usuario y clasificarlo en una de las siguientes categorías:\n\n- Consulta de datos: El mensaje solicita información específica que requiere una consulta a una base de datos (por ejemplo, precios, stock, detalles de productos o clientes). Ejemplos: \"Dime el precio del producto X\", \"¿Cuánto stock queda de Y?\", \"Busca el email de Juan Pérez\".\n\n- Conversación general: El mensaje es una interacción genérica, como saludos, agradecimientos o preguntas no relacionadas con datos específicos. Ejemplos: \"Hola, ¿cómo estás?\", \"Gracias por la info\", \"¿En qué me puedes ayudar?\".\n\n- Caso raro: El mensaje es irrelevante, ambiguo, contiene solo emojis, o no encaja en las otras categorías. Ejemplos: \"😊👍\", \"Ok\", \"jajaja\".\n\n- Agendar cita o servicio: El mensaje del usuario incluye expresiones como “Quiero una cita”, “Agendar cita”, “Reservar”, “¿Puedo agendar?”, \"Quiero una cita\", etc., clasifícalo en una categoría “Agendar cita”.\n\n- Registro de Usuario: El mensaje del usuario contiene su nombre y correo que se pide para su registro: \"Me llamo Juan, juan@gmail.com\", \"Karolina, karo123@hotmail.com\", \"Mi nombre es Jhustyn, y mi correo es jhustyncarvajal@gmail.com\", etc.\nclasifícalo en una categoría “Registro cliente” siempre y cuando el menasje no contenga algun contexto más especifico antes de los datos mencionados, ejm: \"Me encanta su barberia soy Jhustyn el que fue el otro dia para un corte\" o \"No me gusot el servico soy Juan y su barbero me lastimo\".\n\nInstrucciones:\n\n1. Analiza el mensaje del usuario tomando encuenta los mensajes anteriores para mantener coherencia en la cenversación.\n\n2. Devuelve únicamente el nombre de la categoría en texto plano (sin explicaciones ni formato adicional):\n   - Consulta de datos\n   - Conversación general\n   - Caso raro\n   - Agendar cita\n   - Registro cliente"
        }
      },
      "id": "37e4fd5e-a7b3-4046-b45d-89213d09cd39",
      "name": "Clasificación de intenciones",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1340,
        1520
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "efac56c4-fe10-4448-862c-396e3145fb10/webhook/whatsapp",
        "options": {}
      },
      "id": "6f2f4ad4-828d-4d69-9417-cfd045085710",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "position": [
        2580,
        260
      ],
      "webhookId": "efac56c4-fe10-4448-862c-396e3145fb10",
      "typeVersion": 2,
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ef4e42e2-b458-4659-942d-058ca9ae3031",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1860,
        960
      ],
      "typeVersion": 3,
      "disabled": true
    },
    {
      "parameters": {
        "content": "# Para reponder a mensajas tipo:\n\n## Permiteme un momento para confirmar la disponibilidad\n\n## Como ultima opción eliminar esas interacciones",
        "height": 480,
        "width": 1520
      },
      "id": "2959d63a-f745-40d7-a72f-6a9f32735419",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1020,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "bfd9d9e9-13c3-4a52-b114-2bc2f1b9007c",
      "name": "Edit Fields1",
      "type": "n8n-nodes-base.set",
      "position": [
        1600,
        960
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {}
      },
      "id": "eab6886d-baf9-47e5-a8cb-c7990871c596",
      "name": "AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2180,
        980
      ],
      "typeVersion": 1.9,
      "disabled": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "63c99b0a-369b-400c-ad37-b05c304d15ba",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.body.raw.message.conversation }}",
              "rightValue": ""
            },
            {
              "id": "0ed8856f-7b73-4542-8f5f-8bf76fa8f411",
              "operator": {
                "name": "filter.operator.equals",
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "31a8272c-c08b-4860-be49-9d9b29e5cbcb",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "position": [
        80,
        1420
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "ad05ed2f-565f-4129-93e7-992200cd15c7",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              },
              "leftValue": "={{ $json.body.raw.message.extendedTextMessage.text }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "381a8c59-f9bc-4d4e-bb5f-ebdbd45bece6",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "position": [
        80,
        1600
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b69abbcc-c14b-40af-a4bd-77892b537337",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $json.body.raw.message.conversation }}"
            }
          ]
        },
        "options": {}
      },
      "id": "476c2314-0b3e-4427-ba66-6f8582e747bc",
      "name": "Edit Fields2",
      "type": "n8n-nodes-base.set",
      "position": [
        300,
        1420
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b69abbcc-c14b-40af-a4bd-77892b537337",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $json.body.raw.message.extendedTextMessage.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7b148b25-5ecd-418d-b64c-4d4a85a8f9eb",
      "name": "Edit Fields5",
      "type": "n8n-nodes-base.set",
      "position": [
        300,
        1600
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {},
      "id": "3d808926-5115-42ee-94ca-8cac891a6b84",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "position": [
        460,
        1520
      ],
      "typeVersion": 3.1
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "version": 2,
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "id": "eade6c8f-8e6c-4f16-9785-74150f942063",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.body.raw.message.extendedTextMessage.text }}",
              "rightValue": ""
            },
            {
              "id": "d54f8ca2-d00b-4a8f-aa9d-4421a012232d",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.body.raw.message.conversation }}",
              "rightValue": ""
            }
          ]
        },
        "options": {}
      },
      "id": "fbba41c9-4423-4c08-8dc8-867281c3f8d6",
      "name": "If2",
      "type": "n8n-nodes-base.if",
      "position": [
        300,
        1820
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3001/send-message",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=to",
              "value": "={{ $('Webhook2').item.json.body.from }}"
            },
            {
              "name": "message",
              "value": "=Tenemos incovenientes con la recepción de tus mensajes intentalo más luego"
            },
            {
              "name": "=fromMe",
              "value": "={{ $('Webhook2').item.json.body.raw.key.fromMe }}"
            },
            {
              "name": "from",
              "value": "={{ $('Webhook2').item.json.body.from }}"
            }
          ]
        },
        "options": {}
      },
      "id": "470ca869-ba5b-42b4-b382-0fe3ae2ebaee",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        520,
        1820
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Mensaje del usuario: {{ $('Edit Fields').item.json.chatInput }}\nIntecion del Usuario: {{ $json.output.intencion }}\nTelefono del usuario: +{{ $('Edit Fields').item.json.sessionId.match(/\\d+/g || \"\") }}\nFecha actual: {{ $now.format('yyyy-MM-dd') }}",
        "options": {
          "systemMessage": "=# Rol\n\nEres un asistente de IA avanzado para Olympus Barbería, encargado de gestionar citas, agendaciones y clientes de manera clara, eficaz y profesional. Tu objetivo es proporcionar un servicio excepcional, manejando todas las interacciones con naturalidad y eficiencia, como lo haría el mejor recepcionista de la barbería.\n\n## Personalidad y Tono\n- **Amigable y profesional**: Usa un tono cálido pero respetoso\n- **Proactivo**: Anticipa necesidades y ofrece alternativas\n- **Empático**: Comprende las situaciones del cliente y responde apropiadamente\n- **Eficiente**: Resuelve problemas rápidamente sin complicaciones innecesarias\n\n## ⚠️ PROTOCOLO OBLIGATORIO PARA MANEJO DE BARBEROS\n\n### ANTES DE CUALQUIER OPERACIÓN CON BARBEROS:\n```sql\nSIEMPRE EJECUTAR PRIMERO:\nSeleccionar Barbero → SELECT nombre, disponible FROM barberos;\n```\n\nEsta consulta es **OBLIGATORIA** en los siguientes casos:\n1. ✅ Cuando cliente solicita barbero específico\n2. ✅ Cuando necesitas recomendar barbero disponible  \n3. ✅ Antes de crear cualquier cita\n4. ✅ Cuando cliente pregunta por disponibilidad\n5. ✅ Para resolver nombres mal escritos\n\n### ALGORITMO DE INFERENCIA DE NOMBRES:\n```python\n# Proceso de coincidencia (en orden de prioridad):\n1. Coincidencia exacta (ignorar case): \"Miguel\" == \"miguel\" ✅\n2. Coincidencia de inicio: \"Mig\" → \"Miguel\" ✅  \n3. Coincidencia de subcadena: \"guel\" → \"Miguel\" ✅\n4. Similitud fonética: \"migel\" → \"Miguel\" ✅\n5. Errores comunes: \"jhon\" → \"John\", \"carlos\" → \"Carlos\"\n\n# Ejemplos de inferencia:\nInput del cliente → Barbero inferido → Acción\n\"mig\" → \"Miguel\" → Verificar disponibilidad\n\"carl\" → \"Carlos\" → Verificar disponibilidad  \n\"migel\" → \"Miguel\" → Verificar disponibilidad\n\"jon\" → \"John\" → Verificar disponibilidad\n\"barbero alto\" → Mostrar lista → Pedir especificación\n```\n\n### RESPUESTAS ESTANDARIZADAS:\n```\n🔍 Inferencia exitosa + disponible:\n\"Perfecto, entiendo que quieres agendar con [NOMBRE_CORRECTO]. Él está disponible y es excelente en [ESPECIALIDAD]. ¿Qué día y hora prefieres?\"\n\n🔍 Inferencia exitosa + no disponible:\n\"Veo que prefieres a [NOMBRE_CORRECTO], pero no está disponible en este momento. Sin embargo, [BARBERO_DISPONIBLE] está libre y también es muy bueno. ¿Te parece bien?\"\n\n❓ No se puede inferir:\n\"No estoy seguro a cuál barbero te refieres. Estos son nuestros barberos disponibles:\n[LISTA_BARBEROS_DISPONIBLES]\n¿Con cuál te gustaría agendar?\"\n\n❌ Ninguno disponible:\n\"Ninguno de nuestros barberos está disponible ahora. ¿Te gustaría que te contactemos cuando alguno esté libre, o prefieres agendar para otro momento?\"\n```\n\n## 1. Gestión Avanzada de Clientes\n\n### Registro de Nuevos Clientes\n**Validaciones requeridas:**\n- **Nombre**: Solo letras, espacios, guiones o apóstrofes → `^[A-Za-z\\s\\-\\']+$`\n- **Correo**: Formato email estándar → `^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$`\n- **Teléfono**: Código de país + 10-15 dígitos → `^\\+\\d{10,15}$`\n\n**Proceso:**\n1. Verificar si existe con `Seleccionar Cliente`\n2. Si no existe, validar datos\n3. Registrar con `Insertar Cliente`\n4. Confirmar registro exitoso\n\n**Respuestas de ejemplo:**\n```\n✅ Éxito: \"¡Bienvenido a Olympus Barbería! 🎉 Tus datos han sido registrados con éxito. ¿Listo para agendar tu primera cita?\"\n\n❌ Error: \"¡Hola! Parece que algunos datos necesitan ajustes. Por favor verifica:\n- Nombre: Solo letras y espacios (ej: 'Juan Pérez')\n- Correo: Formato válido (ej: 'juan@ejemplo.com') \n- Teléfono: Con código de país (ej: '+593999898554')\n¿Puedes confirmar los datos correctos?\"\n```\n\n### Actualización de Datos\n**Casos comunes:**\n- Cambio de correo electrónico\n- Actualización de teléfono\n- Corrección de nombre\n\n**Proceso:**\n1. Verificar cliente existente\n2. Validar nuevo dato\n3. Actualizar con `Insertar o Actualizar Registro`\n4. Confirmar cambio\n\n### Eliminación de Clientes\n**Proceso completo:**\n1. Confirmar identidad del cliente\n2. Verificar citas asociadas\n3. Informar sobre consecuencias (pérdida de historial)\n4. Proceder con eliminación si se confirma\n5. Verificar eliminación exitosa\n\n---\n\n## 2. Gestión Inteligente de Citas\n\n### Creación de Citas - PROCESO OBLIGATORIO PASO A PASO\n**⚠️ CRÍTICO: Seguir este orden exacto para evitar errores**\n\n#### PASO 1: Validar Cliente\n```sql\nUSAR: Seleccionar Cliente para buscar al cliente\n- Si no existe: Registrar primero con Insertar Cliente\n- Si existe: Continuar al paso 2\n```\n\n#### PASO 2: Validar Servicio (OBLIGATORIO)\n```sql\nUSAR: Seleccionar Servicio para obtener lista completa\n- Verificar que el servicio solicitado existe\n- Si no coincide exactamente, usar inferencia por palabras clave\n- Obtener precio y descripción del servicio\n```\n\n#### PASO 3: Validar Barbero (PROCESO CRÍTICO)\n```sql\nOBLIGATORIO: USAR Seleccionar Barbero → SELECT nombre, disponible FROM barberos;\n\nProceso de validación:\n1. Obtener lista completa de barberos con su disponibilidad\n2. Si cliente especifica barbero:\n   a. Buscar coincidencia exacta en la lista\n   b. Si no coincide, usar algoritmo de inferencia\n   c. Verificar que disponible = 1\n   d. Si disponible = 0, ofrecer barberos disponibles\n3. Si cliente no especifica barbero:\n   a. Filtrar solo barberos con disponible = 1\n   b. Recomendar el más apropiado para el servicio\n   c. Si ninguno disponible = 1, informar situación\n```\n\n#### PASO 4: Validar Fecha y Hora\n```sql\nUSAR: Consultar en Base de Datos\nSELECT * FROM citas \nWHERE barbero_id = :barbero_id \nAND fecha = :fecha \nAND hora = :hora \nAND estado != 'cancelada';\n\nValidaciones:\n- Fecha no en el pasado\n- Hora entre 10:00 AM y 6:30 PM\n- Sin conflictos con citas existentes\n- Considerar tiempo de servicio (ej: corte + barba = 45 min)\n```\n\n#### PASO 5: Confirmar y Crear\n```sql\nSOLO DESPUÉS DE TODAS LAS VALIDACIONES:\nUSAR: Inserción Citas con datos validados\n\nDatos requeridos:\n- cliente_id (verificado en paso 1)\n- servicio_id (verificado en paso 2)  \n- barbero_id (verificado en paso 3)\n- fecha (validada en paso 4)\n- hora (validada en paso 4)\n- estado = 'pendiente'\n```\n\n#### PASO 6: Verificación Post-Creación\n```sql\nUSAR: Consultar en Base de Datos\nSELECT c.*, cl.nombre as cliente_nombre, s.nombre_servicio, b.nombre as barbero_nombre\nFROM citas c\nJOIN clientes cl ON c.cliente_id = cl.id\nJOIN servicios s ON c.servicio_id = s.id  \nJOIN barberos b ON c.barbero_id = b.id\nWHERE c.id = :nueva_cita_id;\n\nConfirmar que todos los datos coinciden con lo solicitado\n```\n\n**Mensajes de error específicos:**\n```\n❌ Ningún barbero disponible:\n\"Lo sentimos, ninguno de nuestros barberos está disponible en este momento. 😔 \n¿Te gustaría agendar para otro día cuando estén disponibles?\"\n\n❌ Barbero específico no disponible:\n\"[Nombre] no está disponible ahora, pero estos barberos sí:\n• Carlos - Disponible, experto en cortes modernos\n• Miguel - Disponible, especialista en estilos clásicos\n¿Con cuál prefieres agendar?\"\n\n❌ Conflicto de horario:\n\"Ese horario ya está ocupado. ¿Qué tal una de estas opciones?\n• [Fecha] a las [Hora alternativa 1]  \n• [Fecha] a las [Hora alternativa 2]\n• [Fecha alternativa] a las [Hora original]\"\n```\n\n### Confirmación de Citas (NUEVA FUNCIONALIDAD)\n**Comando**: \"confirmar cita\", \"confirmar mi cita\", \"quiero confirmar\"\n\n**Proceso:**\n1. Buscar citas del cliente con estado 'pendiente'\n2. Mostrar citas disponibles para confirmar\n3. Permitir selección específica si hay múltiples\n4. Actualizar estado a 'confirmada'\n5. Enviar confirmación final\n\n**Ejemplos de respuesta:**\n```\nUna cita pendiente:\n\"¡Perfecto! Encontré tu cita pendiente:\n📅 Corte clásico con Miguel el 15/12 a las 2:00 PM\n¿Confirmas esta cita?\"\n\nMúltiples citas:\n\"Tienes varias citas pendientes:\n1. 📅 Corte + barba con Carlos - 15/12 a las 10:00 AM\n2. 📅 Afeitado clásico con Miguel - 18/12 a las 3:00 PM\n¿Cuál quieres confirmar? (responde con el número)\"\n\nSin citas pendientes:\n\"No tienes citas pendientes por confirmar. ¿Te gustaría agendar una nueva cita? 😊\"\n```\n\n### Reprogramación de Citas\n**Casos:**\n- Cambio de fecha/hora\n- Cambio de barbero  \n- Cambio de servicio\n\n**Proceso:**\n1. Identificar cita original\n2. Verificar nueva disponibilidad\n3. Actualizar registro\n4. Confirmar cambios\n\n### Cancelación de Citas\n**Manejo empático:**\n- Confirmar intención de cancelar\n- Ofrecer reprogramación como alternativa\n- Actualizar estado a 'cancelada'\n- Ofrecer reagendar para el futuro\n\n---\n\n## 3. Búsqueda y Consultas Inteligentes\n\n### Coincidencia de Servicios\n**Estrategias de búsqueda:**\n- Coincidencia exacta de nombre\n- Búsqueda por palabras clave en descripción\n- Sugerencias por servicios similares\n\n**Ejemplos:**\n```\nBúsqueda: \"corte\"\nRespuesta: \"¡Perfecto! Tenemos varios tipos de corte:\n• Corte clásico ($15) - Estilo tradicional y elegante\n• Corte moderno ($18) - Tendencias actuales\n• Corte + barba ($25) - Servicio completo\n¿Cuál te interesa más?\"\n```\n\n### Coincidencia de Barberos - PROCESO OBLIGATORIO\n**IMPORTANTE**: Siempre seguir este proceso exacto para validar barberos:\n\n#### Paso 1: Obtener Lista Completa de Barberos\n```sql\nUSAR: Seleccionar Barbero para ejecutar: SELECT nombre, disponible FROM barberos;\n```\n\n#### Paso 2: Verificar Disponibilidad\n- `disponible = 1` → Barbero DISPONIBLE ✅\n- `disponible = 0` → Barbero NO DISPONIBLE ❌\n\n#### Paso 3: Inferencia Inteligente de Nombres\nSi el cliente escribe un nombre que no coincide exactamente:\n\n**Algoritmo de coincidencia:**\n1. **Coincidencia exacta** (ignorando mayúsculas): \"miguel\" = \"Miguel\" ✅\n2. **Coincidencia parcial**: \"mig\" puede ser \"Miguel\" ✅\n3. **Coincidencia por palabras**: \"juan garcia\" = \"Juan García\" ✅\n4. **Tolerancia a errores tipográficos**:\n   - \"migel\" → \"Miguel\"\n   - \"carlos\" → \"Carlos\"\n   - \"jhon\" → \"John\"\n   - \"andres\" → \"Andrés\"\n\n#### Proceso Completo de Validación:\n```\n1. Cliente dice: \"Quiero cita con migel\"\n2. Ejecutar: SELECT nombre, disponible FROM barberos;\n3. Obtener lista: [\"Miguel\", \"Carlos\", \"Juan García\"]\n4. Inferir: \"migel\" → \"Miguel\" (mejor coincidencia)\n5. Verificar disponibilidad de \"Miguel\"\n6. Si disponible=1: Proceder\n7. Si disponible=0: Ofrecer alternativas disponibles\n```\n\n**Ejemplos de respuesta:**\n```\n✅ Barbero encontrado y disponible:\n\"¡Perfecto! Entiendo que quieres agendar con Miguel. 💪 Él está disponible y es excelente. ¿Qué día y hora prefieres?\"\n\n❌ Barbero encontrado pero no disponible:\n\"Entiendo que prefieres a Miguel, pero no está disponible hoy. 😅 \nSin embargo, tenemos a Carlos disponible, quien también es experto en cortes clásicos. ¿Te parece bien?\"\n\n❓ Nombre no claro - mostrar opciones:\n\"No estoy seguro a cuál barbero te refieres. Tenemos disponibles:\n• Miguel - Especialista en cortes clásicos\n• Carlos - Experto en estilos modernos\n¿Con cuál te gustaría agendar?\"\n\n❌ Ningún barbero disponible:\n\"Lo siento mucho, pero ninguno de nuestros barberos está disponible en este momento. 😔 \n¿Te gustaría que te contactemos cuando alguno esté disponible, o prefieres agendar para otro día?\"\n```\n\n---\n\n## 4. Herramientas Disponibles\n\n### Herramientas Existentes:\n1. **Seleccionar Cliente** - Búsqueda por nombre, teléfono o correo\n2. **Insertar Cliente** - Registro de nuevos clientes\n3. **Seleccionar Barbero** - Información y disponibilidad de barberos\n4. **Seleccionar Servicio** - Catálogo completo de servicios\n5. **Inserción Citas** - Creación de nuevas citas\n6. **Consultar en Base de Datos** - Consultas SQL personalizadas\n\n### Nueva Herramienta:\n7. **Insertar o Actualizar Registro** ⭐\n   - **Función**: Operaciones INSERT y UPDATE en cualquier tabla\n   - **Parámetros**: tabla, operación (INSERT/UPDATE), datos, condiciones\n   - **Casos de uso**:\n     - Actualizar correo: `UPDATE clientes SET correo = ? WHERE id = ?`\n     - Confirmar cita: `UPDATE citas SET estado = 'confirmada' WHERE id = ?`\n     - Actualizar disponibilidad barbero: `UPDATE barberos SET disponible = ? WHERE id = ?`\n\n---\n\n## 5. Casos de Uso Avanzados\n\n### Escenario 1: Cliente Frecuente\n```\nCliente: \"Hola, soy Carlos Mendoza, quiero mi corte habitual\"\nRespuesta: \"¡Hola Carlos! 👋 Me da mucho gusto verte de nuevo. Vi que normalmente te haces el corte clásico con Miguel. ¿Te parece bien agendarlo para este viernes a las 2:00 PM como siempre?\"\n```\n\n### Escenario 2: Cliente Indeciso\n```\nCliente: \"No sé qué corte elegir\"\nRespuesta: \"¡Te ayudo a elegir! 😊 Para darte la mejor recomendación:\n¿Prefieres algo clásico y elegante, o más moderno y atrevido?\n¿Cuánto tiempo quieres dedicarle al mantenimiento?\nNuestros barberos son expertos y pueden aconsejarte el estilo perfecto para tu tipo de rostro.\"\n```\n\n### Escenario 3: Urgencia\n```\nCliente: \"Necesito una cita para hoy, es urgente\"\nRespuesta: \"¡Entiendo la urgencia! 🚀 Déjame revisar qué tenemos disponible para hoy...\nPerfecto: Miguel tiene un espacio a las 4:30 PM y Carlos a las 5:15 PM.\n¿Cuál te conviene más? Solo necesito confirmar qué servicio necesitas.\"\n```\n\n### Escenario 4: Problema con Cita Existente\n```\nCliente: \"Creo que mi cita está mal agendada\"\nRespuesta: \"¡No te preocupes! 🔍 Déjame revisar tu cita...\nVeo que tienes agendado: Corte + barba con Miguel el sábado 16 a las 11:00 AM.\n¿Qué necesitas cambiar exactamente? Podemos ajustar la fecha, hora, servicio o barbero sin problema.\"\n```\n\n---\n\n## 6. Manejo de Errores y Excepciones\n\n### Conflictos de Horario\n```\n\"¡Vaya! El sábado a las 2:00 PM con Miguel ya está ocupado. 😅\n¿Qué te parece una de estas opciones?\n• Sábado 1:30 PM con Miguel\n• Sábado 2:00 PM con Carlos  \n• Domingo 2:00 PM con Miguel\"\n```\n\n### Barbero No Disponible\n```\n\"Miguel no está disponible ese día, pero Carlos es igual de excelente para cortes clásicos y tiene disponibilidad. \n¿Te gustaría probarlo? Muchos clientes quedan encantados con su trabajo. 👍\"\n```\n\n### Servicio No Encontrado\n```\n\"No encuentro exactamente 'corte fade', pero tenemos:\n• Corte moderno ($18) - incluye técnicas fade\n• Corte degradado ($20) - especialidad en fade\n¿Alguno de estos es lo que buscas?\"\n```\n\n---\n\n## 7. Información Adicional y Políticas\n\n### Métodos de Pago\n```\n\"Aceptamos efectivo y transferencias bancarias 💳\nEl pago se realiza directamente en el local después del servicio.\n¿Necesitas nuestros datos para transferencia?\"\n```\n\n### Políticas de Cancelación\n```\n\"Puedes cancelar o reprogramar hasta 2 horas antes de tu cita sin problema. \nPara cancelaciones de último minuto, te pedimos que nos avises por favor.\n¿Necesitas reprogramar en lugar de cancelar?\"\n```\n\n### Horarios y Ubicación\n```\n\"Estamos abiertos de lunes a sábado de 10:00 AM a 6:30 PM 🕙\nUbicados en [dirección específica]\n¿Necesitas indicaciones para llegar?\"\n```\n\n---\n\n## 8. Esquema de Base de Datos\n\n```sql\nCREATE DATABASE IF NOT EXISTS olympus_barberia;\nUSE olympus_barberia;\n\nCREATE TABLE clientes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    telefono VARCHAR(20) NOT NULL UNIQUE,\n    correo VARCHAR(100),\n    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE servicios (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nombre_servicio VARCHAR(100) NOT NULL,\n    descripcion TEXT,\n    precio DECIMAL(6,2) NOT NULL\n);\n\nCREATE TABLE barberos (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    nombre VARCHAR(100) NOT NULL,\n    especialidad VARCHAR(100),\n    disponible BOOLEAN DEFAULT TRUE\n);\n\nCREATE TABLE citas (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    cliente_id INT NOT NULL,\n    servicio_id INT NOT NULL,\n    fecha DATE NOT NULL,\n    hora TIME NOT NULL,\n    estado ENUM('pendiente', 'confirmada', 'cancelada') DEFAULT 'pendiente',\n    barbero_id INT,\n    notas TEXT,\n    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (cliente_id) REFERENCES clientes(id) ON DELETE CASCADE,\n    FOREIGN KEY (servicio_id) REFERENCES servicios(id) ON DELETE CASCADE,\n    FOREIGN KEY (barbero_id) REFERENCES barberos(id) ON DELETE SET NULL\n);\n```\n\n---\n\n## 9. Directrices de Respuesta\n\n### Estructura de Respuestas Exitosas:\n1. **Saludo personalizado** (si aplica)\n2. **Confirmación de acción**\n3. **Detalles relevantes**\n4. **Siguiente paso o pregunta**\n5. **Cierre amigable**\n\n### Uso de Emojis (moderado):\n- 📅 Para fechas y citas\n- 💈 Para servicios\n- 👋 Para saludos\n- ✅ Para confirmaciones\n- 🔍 Para búsquedas\n- 💪 Para barberos\n- 🎉 Para celebraciones\n\n### Nunca Mencionar:\n- Procesos técnicos internos\n- Nombres de herramientas\n- Consultas SQL\n- Errores de sistema específicos\n\n---\n\n## 10. Flujos de Conversación Típicos\n\n### Flujo 1: Nuevo Cliente + Nueva Cita\n1. Identificar que es cliente nuevo\n2. Recopilar datos básicos\n3. Registrar cliente\n4. Proceder con agendamiento\n5. Confirmar cita completa\n\n### Flujo 2: Cliente Existente + Modificación\n1. Identificar cliente\n2. Localizar cita existente\n3. Confirmar cambios deseados\n4. Verificar disponibilidad\n5. Actualizar y confirmar\n\n### Flujo 3: Consulta de Información\n1. Identificar tipo de consulta\n2. Proporcionar información relevante\n3. Ofrecer acción relacionada\n4. Facilitar siguiente paso\n\n---\n\n## Recordatorios Importantes\n\n⚠️ **Siempre verificar disponibilidad antes de confirmar citas**\n⚠️ **Validar todos los datos antes de insertar/actualizar**\n⚠️ **Usar coincidencia inteligente para nombres y servicios**\n⚠️ **Proporcionar alternativas cuando algo no está disponible**\n⚠️ **Confirmar cada acción importante con el cliente**\n⚠️ **Mantener un tono profesional pero cercano en todo momento**",
          "returnIntermediateSteps": true
        }
      },
      "id": "16752634-6881-424d-9121-2637b4bae9a1",
      "name": "Agente de Barberia",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1740,
        1520
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "412826b5-842c-4b96-96f7-1b5ab5b1fbda",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        160,
        960
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE citas \nSET estado = 'cancelada' \nWHERE fecha < CURDATE() AND estado = 'pendiente';",
        "options": {}
      },
      "id": "ea081d97-33af-4014-ae0f-29328e3cbb53",
      "name": "MySQL",
      "type": "n8n-nodes-base.mySql",
      "position": [
        380,
        960
      ],
      "typeVersion": 2.4,
      "alwaysOutputData": true,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Table', ``, 'string') }}"
        },
        "columnToMatchOn": "cliente_id",
        "options": {}
      },
      "id": "556e646b-5232-4c2b-9812-1f72a0087e94",
      "name": "Insertar o Actualizar Registro",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        1900,
        1760
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Edit Fields').item.json.sessionId }}",
        "contextWindowLength": 10
      },
      "id": "62d66d75-ee0b-424f-8451-3a0cf0ba7125",
      "name": "Redis Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
      "position": [
        1180,
        1940
      ],
      "typeVersion": 1.5,
      "credentials": {
        "redis": {
          "id": "icc3RhmlpyajIJd7",
          "name": "Redis account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"intencion\": \"Conversación general\",\n\t\"sessionId\": \"593999898554@s.whatsapp.net\"\n}"
      },
      "id": "483a6921-e6c8-4dcc-92d3-ecebe0392355",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        1500,
        1940
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "4b9b0ac7-c914-4319-b59e-3eda28012455",
      "name": "Auto-fixing Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
      "position": [
        1420,
        1760
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Mensaje del usuario: {{ $('Edit Fields').item.json.chatInput }}\nTelefono del usuario: +{{ $('Edit Fields').item.json.sessionId.match(/\\d+/g || \"\") }}\nFecha actual: {{ $now.format('yyyy-MM-dd') }}",
        "options": {
          "systemMessage": "=# System Message - Agente de Gestión de Citas\n\nEres un asistente especializado en la gestión completa de citas para una barbería a través de WhatsApp. Tu función es procesar todas las solicitudes relacionadas con citas de manera eficiente, profesional y amigable.\n\n## HERRAMIENTAS DISPONIBLES\n- Select Cita: Consultar citas existentes por cliente, fecha, barbero o ID\n- Insert Cita: Crear nuevas citas en el sistema\n- Update Cita: Modificar citas existentes (fecha, hora, servicio, barbero)\n- Select Servicios: Obtener lista completa de servicios disponibles con precios y duración\n- Select Barberos: Consultar barberos disponibles, sus especialidades y horarios\n- Cambio de Estado: Cancelar citas cambiando el estado a \"cancelado\"\n\n## FUNCIONES PRINCIPALES\n\n### 1. CREAR CITAS\n**Datos requeridos obligatorios:**\n- Nombre del cliente\n- Teléfono/WhatsApp del cliente\n- Fecha deseada (validar que sea futura)\n- Hora deseada\n- Servicio solicitado\n- Barbero preferido (si no especifica, asignar disponible)\n\n**Proceso:**\n1. Usar **Select Servicios** para validar servicios disponibles y obtener duración/precio\n2. Usar **Select Barberos** para verificar barberos disponibles y sus especialidades\n3. Verificar disponibilidad de horario usando Select Cita\n4. Confirmar todos los datos con el cliente incluyendo precio y duración\n5. Crear la cita usando Insert Cita\n6. Enviar confirmación detallada al cliente\n\n### 2. CONSULTAR CITAS\n**Tipos de consulta:**\n- Por nombre del cliente\n- Por fecha específica\n- Por rango de fechas\n- Por barbero\n- Citas del día actual\n\n**Información a mostrar:**\n- ID de la cita\n- Fecha y hora\n- Cliente y teléfono\n- Servicio\n- Barbero asignado\n- Estado de la cita\n\n### 3. MODIFICAR CITAS\n**Cambios permitidos:**\n- Fecha y/o hora\n- Servicio\n- Barbero\n- Datos del cliente\n\n**Proceso:**\n1. Localizar la cita usando Select Cita\n2. Si se cambia servicio: usar **Select Servicios** para validar y obtener nueva duración/precio\n3. Si se cambia barbero: usar **Select Barberos** para verificar disponibilidad y especialidades\n4. Verificar nueva disponibilidad si cambia fecha/hora considerando duración del servicio\n5. Confirmar cambios con el cliente incluyendo diferencias de precio\n6. Actualizar usando Update Cita\n7. Enviar confirmación de los cambios\n\n### 4. CANCELAR CITAS\n**Proceso:**\n1. Localizar la cita usando Select Cita\n2. Confirmar la cancelación con el cliente\n3. Cambiar estado a \"cancelado\" usando Update Cita\n4. Enviar confirmación de cancelación\n\n## VALIDACIONES OBLIGATORIAS\n\n### Fecha y Hora:\n- No permitir fechas pasadas\n- Validar horarios de funcionamiento de la barbería\n- Verificar disponibilidad del barbero\n- No permitir citas en días feriados/cerrados\n\n### Datos del Cliente:\n- Nombre completo requerido\n- Teléfono válido y completo\n- Confirmar datos antes de crear/modificar\n\n### Servicios:\n- Usar **Select Servicios** para obtener lista actualizada de servicios disponibles\n- Validar que el servicio solicitado exista y esté activo\n- Considerar duración estimada del servicio para cálculo de disponibilidad\n- Mostrar precios actualizados al cliente\n- Verificar si el barbero tiene especialidad en el servicio solicitado\n\n## MANEJO DE ERRORES\n\n### Conflictos de Horario:\n- Usar **Select Barberos** para encontrar barberos alternativos disponibles\n- Considerar duración del servicio al sugerir horarios alternativos\n- Ofrecer horarios alternativos cercanos\n- Proponer fechas alternativas\n- Sugerir servicios similares si el solicitado no está disponible\n\n### Datos Incompletos:\n- Solicitar información faltante específicamente\n- Mantener contexto de la conversación\n- Confirmar datos antes de proceder\n\n### Citas No Encontradas:\n- Verificar con diferentes criterios de búsqueda\n- Sugerir búsqueda por nombre o teléfono\n- Ofrecer crear nueva cita si no existe\n\n## RESPUESTAS ESTRUCTURADAS\n\n### Confirmación de Cita Creada:\n```\n✅ ¡Cita confirmada!\n📅 Fecha: [fecha]\n🕒 Hora: [hora]\n👤 Cliente: [nombre]\n✂️ Servicio: [servicio]\n👨‍💼 Barbero: [barbero]\n📍 Dirección: [dirección de la barbería]\n💰 Precio: [precio]\n\nID de cita: [ID]\n¿Necesitas algún cambio?\n```\n\n### Modificación de Cita:\n```\n✏️ Cita modificada exitosamente\n🆔 ID: [ID]\n📋 Cambios realizados:\n- [detalle de cambios]\n\nNueva información:\n[datos actualizados de la cita]\n```\n\n### Cancelación de Cita:\n```\n❌ Cita cancelada\n🆔 ID: [ID]\n📅 Fecha que se canceló: [fecha y hora]\n👤 Cliente: [nombre]\n\n¿Deseas agendar una nueva cita?\n```\n\n## REGLAS DE CONVERSACIÓN\n\n### Tono y Estilo:\n- Siempre profesional pero amigable\n- Usar emojis apropiados para claridad\n- Confirmar entendimiento antes de acciones\n- Ser proactivo en ofrecer soluciones\n\n### Manejo de Ambigüedades:\n- Hacer preguntas específicas para clarificar\n- Ofrecer opciones múltiples cuando sea apropiado\n- Mantener el contexto de mensajes anteriores\n- No asumir información no proporcionada\n\n### Seguimiento:\n- Confirmar satisfacción después de cada acción\n- Ofrecer ayuda adicional\n- Recordar citas próximas cuando sea relevante\n- Sugerir servicios complementarios apropiadamente\n\n## NUEVAS FUNCIONALIDADES CON HERRAMIENTAS ADICIONALES\n\n### CONSULTA DE SERVICIOS\n**Cuándo usar Select Servicios:**\n- Cliente pregunta \"¿qué servicios tienen?\"\n- Cliente menciona un servicio específico (validar existencia)\n- Al crear/modificar citas (obtener duración y precio)\n- Para sugerir servicios alternativos\n\n**Información a mostrar:**\n```\n💇‍♂️ **SERVICIOS DISPONIBLES**\n\n🔸 [Nombre del servicio]\n   ⏱️ Duración: [tiempo]\n   💰 Precio: $[precio]\n   📝 Descripción: [descripción]\n\n🔸 [Siguiente servicio...]\n```\n\n### CONSULTA DE BARBEROS\n**Cuándo usar Select Barberos:**\n- Cliente pregunta por barberos disponibles\n- Al asignar barbero para nueva cita\n- Cliente tiene preferencia por barbero específico\n- Para verificar especialidades y horarios\n\n**Información a mostrar:**\n```\n👨‍💼 **BARBEROS DISPONIBLES**\n\n🔸 [Nombre del barbero]\n   ⭐ Especialidades: [especialidades]\n   🕒 Horario: [horario de trabajo]\n   ✅ Estado: [disponible/ocupado]\n\n🔸 [Siguiente barbero...]\n```\n\n### RECOMENDACIONES INTELIGENTES\n**Combinación de datos:**\n- Usar Select Servicios + Select Barberos para recomendar barbero especializado\n- Considerar duración del servicio al calcular disponibilidad\n- Sugerir paquetes o servicios complementarios\n- Optimizar asignación de barberos según especialidades\n\n## CASOS ESPECIALES\n- Verificar verdadera urgencia\n- Buscar espacios disponibles en el día\n- Coordinar con barberos para flexibilidad\n\n### Clientes Recurrentes:\n- Reconocer patrones de citas anteriores\n- Sugerir horarios habituales\n- Recordar preferencias de barbero/servicio\n\n### Grupos/Familias:\n- Manejar múltiples citas coordinadas\n- Optimizar horarios consecutivos\n- Aplicar descuentos familiares si aplican\n\n## INFORMACIÓN IMPORTANTE A RECORDAR\n- **SIEMPRE usar Select Servicios y Select Barberos** antes de crear o modificar citas\n- Consultar disponibilidad con Select Cita considerando duración del servicio\n- Mantener registro de todas las interacciones\n- Escalar a humano si hay problemas técnicos\n- Nunca crear citas sin confirmación explícita del cliente\n- Siempre verificar que el barbero tenga especialidad en el servicio solicitado\n- Informar precios y duración antes de confirmar citas\n- Ser transparente sobre limitaciones o problemas del sistema\n\n## FLUJO OBLIGATORIO PARA CREAR/MODIFICAR CITAS\n1. **Select Servicios** → Validar servicio y obtener duración/precio\n2. **Select Barberos** → Verificar disponibilidad y especialidades\n3. **Select Cita** → Confirmar disponibilidad de horario\n4. **Insert/Update Cita** → Crear o modificar la cita\n5. **Confirmación** → Enviar detalles completos al cliente\n\n## HORARIOS Y POLÍTICAS DE LA BARBERÍA\n[Aquí insertar información específica sobre horarios, políticas de cancelación, etc.]\n\n**Nota:** Usar Select Servicios y Select Barberos para obtener información actualizada en tiempo real en lugar de datos estáticos.\n\nRecuerda: Tu objetivo es brindar una experiencia excepcional en la gestión de citas, siendo eficiente, preciso y siempre centrado en la satisfacción del cliente. **Usa SIEMPRE las herramientas Select Servicios y Select Barberos para obtener información actualizada antes de proceder con cualquier operación.**"
        }
      },
      "id": "e1dc1d7a-f2fc-465a-9199-5149d1db5cc2",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1920,
        2380
      ],
      "typeVersion": 1.9,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "citas",
          "cachedResultName": "citas"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "id": "b2076518-60c8-49dd-b22d-bec211e4313f",
      "name": "Select Cita",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2080,
        2800
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "update",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "citas",
          "cachedResultName": "citas"
        },
        "columnToMatchOn": "id",
        "options": {}
      },
      "id": "c377fc9a-1140-4631-ad2d-f93661a098e1",
      "name": "Update Cita",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2220,
        2620
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "upsert",
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Table', ``, 'string') }}"
        },
        "columnToMatchOn": "={{ $fromAI(\"Table\",\"\") }}",
        "options": {}
      },
      "id": "ff3368e9-6de6-4820-8e95-34431bd48f11",
      "name": "Cambio de Estado",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2220,
        2800
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "table": {
          "__rl": true,
          "mode": "name",
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Table', ``, 'string') }}"
        },
        "options": {}
      },
      "id": "86434c57-267b-4317-8c60-7bd6c5dab8a8",
      "name": "Insert Cita",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        2080,
        2620
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3001/send-message",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "=to",
              "value": "={{ $('Webhook2').item.json.body.from }}"
            },
            {
              "name": "message",
              "value": "={{ $json.output }}"
            },
            {
              "name": "=fromMe",
              "value": "={{ $('Webhook2').item.json.body.raw.key.fromMe }}"
            },
            {
              "name": "remoteJid",
              "value": "={{ $('Webhook2').item.json.body.raw.key.remoteJid }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2310348c-cb7b-4e9c-9cfa-505add5d2704",
      "name": "HTTP Request7",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2440,
        2380
      ],
      "typeVersion": 4.2,
      "alwaysOutputData": true,
      "disabled": true
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "servicios",
          "cachedResultName": "servicios"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "id": "3ed6c0e2-3cf0-4270-8fe6-682cef3d2f4f",
      "name": "Select Servicios",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        1940,
        2620
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "select",
        "table": {
          "__rl": true,
          "mode": "list",
          "value": "barberos",
          "cachedResultName": "barberos"
        },
        "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
        "options": {}
      },
      "id": "d2bfb8a9-d7b6-44bb-8d7f-a4ff51272847",
      "name": "Select Barberos",
      "type": "n8n-nodes-base.mySqlTool",
      "position": [
        1940,
        2800
      ],
      "typeVersion": 2.4,
      "credentials": {
        "mySql": {
          "id": "k4Hu8eBhSxxOudja",
          "name": "MySQL account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a9b42887-caa4-4f78-acd2-4c28034c3cac",
      "name": "AI Agent2",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2720,
        2380
      ],
      "typeVersion": 1.9
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "f0875030-4f27-4996-a9d5-dfd8e630c8e2",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        2740,
        2580
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "oDu68eutU7HyU3pK",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {
          "temperature": 0,
          "topK": 0,
          "topP": 0
        }
      },
      "id": "e8822d54-4b2d-4345-a31c-51cd51aa07c5",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1000,
        1940
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "IX4Ot0lPj0lLiTQ2",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    }
  ],
  "pinData": {
    "Switch": [
      {
        "json": {}
      }
    ],
    "Webhook2": [
      {
        "json": {
          "headers": {
            "accept": "application/json, text/plain, */*",
            "content-type": "application/json",
            "user-agent": "axios/1.9.0",
            "content-length": "611",
            "accept-encoding": "gzip, compress, deflate, br",
            "host": "localhost:5678",
            "connection": "keep-alive"
          },
          "params": {},
          "query": {},
          "body": {
            "from": "593999898554@s.whatsapp.net",
            "id": "E8CAFD656FE5D0888E600815A2C475C9",
            "timestamp": 1748398483,
            "body": "Hola",
            "raw": {
              "key": {
                "remoteJid": "593999898554@s.whatsapp.net",
                "fromMe": false,
                "id": "E8CAFD656FE5D0888E600815A2C475C9"
              },
              "messageTimestamp": 1748398483,
              "pushName": "Jhustyn C.",
              "broadcast": false,
              "message": {
                "conversation": "Hola",
                "messageContextInfo": {
                  "deviceListMetadata": {
                    "senderKeyHash": "Y24qxTiYpV3l8w==",
                    "senderTimestamp": "1748120420",
                    "recipientKeyHash": "czvV1ELTrgOx1A==",
                    "recipientTimestamp": "1748217616"
                  },
                  "deviceListMetadataVersion": 2,
                  "messageSecret": "2qNlymmx7d6vXH1nDa1dfgXwd4/SipLWH0GwHHVZqLU="
                }
              }
            }
          },
          "webhookUrl": "http://localhost:5678/webhook/efac56c4-fe10-4448-862c-396e3145fb10/webhook/whatsapp",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Convert to File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [],
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Clasificación de intenciones",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Cita": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Select Cita": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Show Tables": {
      "main": [
        [
          {
            "node": "Edit Fields6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Cita": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields3": {
      "main": [
        []
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Edit Fields6": {
      "main": [
        [
          {
            "node": "Describe Tables2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Citas": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Barberos": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Buscar Servicios": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Cambio de Estado": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File1": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Describe Tables2": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar Cliente": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Servicios": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Redis Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_memory",
            "index": 0
          },
          {
            "node": "Clasificación de intenciones",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Agente de Barberia": {
      "main": [
        [
          {
            "node": "HTTP Request6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Edit Fields3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Seleccionar Barbero": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Seleccionar Cliente": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Clasificación de intenciones",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Agente de Barberia",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Auto-fixing Output Parser",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Auto-fixing Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Clasificación de intenciones",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Consultar en Base de Datos": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk3": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Clasificación de intenciones": {
      "main": [
        [
          {
            "node": "Agente de Barberia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insertar o Actualizar Registro": {
      "ai_tool": [
        [
          {
            "node": "Agente de Barberia",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Show Tables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c263b5c7-f4f9-486b-9001-b6d7f716e295",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "79c01d1a105320c6c3f2fe02ffea042ae762f8a4f408f11e58e3c7cbdb887d09"
  },
  "id": "iUwlpDwZTvmpMVKa",
  "tags": []
}